#include <iostream>
using namespace std;
class Stack
{

    int top_of_stack;
    int size_stack;
    int *stacktank;
    static int counter;

public:
    Stack()
    {
        cout<<"S_Const"<<endl;
        top_of_stack=0;
        size_stack=5;
        stacktank=new int[size_stack];
        counter++;

    }
    Stack(int _size)
    {
        cout<<"S_Const"<<endl;
        top_of_stack=0;
        size_stack=_size;
        stacktank=new int[size_stack];
        counter++;
    }
    ~Stack()
    {
        cout<<"S_Dest"<<endl;

        for(int i=0; i<size_stack; i++)
        {
            stacktank[i]=-1;
        }
counter--;
        delete [] stacktank;
    }
    int isFull()
    {
        return top_of_stack==size_stack;
    }
    int isEmpty()
    {
        return top_of_stack==0;
    }


    void push(int _data )
    {

        if(top_of_stack==size_stack)
        {

        }
        else
        {
            stacktank[top_of_stack]=_data;
            top_of_stack++;

        }
    }
    int pop(void)
    {
        if(isEmpty()==top_of_stack) {}
        else
        {
            top_of_stack--;
            return stacktank[top_of_stack];
        }
    }
static int getCounter()
    {

        return counter;
    }

};
int Stack::counter=0;

int main()
{Stack s1;
       cout<<"counter is "<< s1.getCounter()<<endl;
    return 0;
}
